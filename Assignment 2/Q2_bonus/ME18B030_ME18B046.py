# -*- coding: utf-8 -*-
"""ME18B030_ME18B046_Direhorse_Bonus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tJb544OEW-IMODcyoDCc-OVl0eOUI33J

Part-f (optional bonus) Code from scratch for the backpropagation algorithm
"""

import numpy as np
import pandas as pd

np.random.seed(0)

df = pd.read_csv('direhorse_data.csv')
shuffled_df = df.sample(frac=1,random_state=1).reset_index(drop=True)

X_train, y_train = shuffled_df[:50]['Ages'], shuffled_df[:50]['Weights']
X_test, y_test = shuffled_df[50:]['Ages'], df[50:]['Weights'] 

X_train = np.array(X_train).reshape(1,X_train.shape[0])
y_train = np.array(y_train).reshape(1, y_train.shape[0])
X_test = np.array(X_test).reshape(1,X_test.shape[0])
y_test = np.array(y_test).reshape(1, y_test.shape[0])
print ('Train X Shape: ', X_train.shape)
print ('Test X Shape: ', X_test.shape)

def sigmoid(x):
  return 1/(1+np.exp(-x))
def sigmoid_der(x):
  return sigmoid(x)*(1-sigmoid(x))
def tanh(x):
  return (np.exp(x)-np.exp(-x))/(np.exp(+x)+np.exp(-x))
def tanh_der(x):
  return 1 - np.power(tanh(x),2)
def relu(x):
  x[x<0] = 0
  return x

def normalize(X):
  norm = np.linalg.norm(X)
  return X/norm

def parameters_initialization(input_unit, hidden_unit, output_unit):
    W1 = np.random.randn(hidden_unit, input_unit)*((2/hidden_unit)**0.5)
    b1 = np.zeros((hidden_unit, 1))
    W2 = np.random.randn(output_unit, hidden_unit)*((2/hidden_unit)**0.5)
    b2 = np.zeros((output_unit, 1))
    parameters = {"W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2}
    
    return parameters

def forward_propagation(X, parameters):
    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
    
    Z1 = np.dot(W1, X) + b1
    A1 = sigmoid(Z1)
    Z2 = np.dot(W2, A1) + b2
    A2 = Z2
    cache = {"Z1": Z1,"A1": A1,"Z2": Z2,"A2": A2}
    
    return A2, cache

def mse(A2, Y):
    m = Y.shape[1] 
    cost = (1/2)*np.sum(np.square(A2-Y))/m
    cost = float(np.squeeze(cost))

    return cost

def backward_propagation(parameters, cache, X, Y):
    #number of training example
    m = X.shape[1]
    
    W1 = parameters['W1']
    W2 = parameters['W2']
    A1 = cache['A1']
    A2 = cache['A2']
    Z1 = cache['Z1']
    Z2 = cache['Z2']
   
    dZ2 = (A2-Y)
    dW2 = (1/m) * np.dot(dZ2, A1.T)
    db2 = (1/m) * np.sum(dZ2, axis=1, keepdims=True)
    dZ1 = np.multiply(np.dot(W2.T, dZ2), sigmoid_der(Z2))
    dW1 = (1/m) * np.dot(dZ1, X.T) 
    db1 = (1/m)*np.sum(dZ1, axis=1, keepdims=True)
    
    grads = {"dW1": dW1, "db1": db1, "dW2": dW2,"db2": db2}
    
    return grads

def gradient_descent(parameters, grads, learning_rate = 0.001):
    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
   
    dW1 = grads['dW1']
    db1 = grads['db1']
    dW2 = grads['dW2']
    db2 = grads['db2']
    W1 = W1 - learning_rate * dW1
    b1 = b1 - learning_rate * db1
    W2 = W2 - learning_rate * dW2
    b2 = b2 - learning_rate * db2
    
    parameters = {"W1": W1, "b1": b1,"W2": W2,"b2": b2}
    
    return parameters

def neural_network_model(X, Y, hidden_unit, num_iterations = 1000, verbose=True):
    input_unit = 1
    output_unit = 1
    
    parameters = parameters_initialization(input_unit, hidden_unit, output_unit)
   
    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
    
    for i in range(0, num_iterations+1):
        A2, cache = forward_propagation(X, parameters)
        cost = mse(A2, Y)
        grads = backward_propagation(parameters, cache, X, Y)
        prev = parameters
        parameters = gradient_descent(parameters, grads)
        if verbose:
          if i % 100 == 0:
              print ("Cost after iteration %i: %f &" %(i, cost), "Validation Cost %i: %f" %(i,mse(forward_propagation(X_test,parameters)[0],y_test)))

    return parameters

parameters = neural_network_model(X_train, y_train, 100)

mse(forward_propagation(X_test,parameters)[0],y_test)

hidden_units_array = []
MSEs = []
for hidden_units in np.linspace(1,500,25):
  hidden_units = int(hidden_units)
  parameters = neural_network_model(normalize(X_train), y_train, hidden_units, verbose=False)
  hidden_units_array.append(hidden_units)
  MSEs.append(mse(forward_propagation(normalize(X_test),parameters)[0],y_test))
  print(hidden_units,mse(forward_propagation(normalize(X_test),parameters)[0],y_test))

import matplotlib.pyplot as plt
plt.plot(hidden_units_array,MSEs)
plt.xlabel("Number of hidden units")
plt.ylabel("MSE")
plt.title("Validation MSE with respect to number of hidden units")
plt.show()

